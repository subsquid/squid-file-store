/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as BloomFilterAlgorithm from "./BloomFilterAlgorithm";
import * as BloomFilterHash from "./BloomFilterHash";
import * as BloomFilterCompression from "./BloomFilterCompression";
export interface IBloomFilterHeaderArgs {
    numBytes: number;
    algorithm: BloomFilterAlgorithm.BloomFilterAlgorithm;
    hash: BloomFilterHash.BloomFilterHash;
    compression: BloomFilterCompression.BloomFilterCompression;
}
export class BloomFilterHeader {
    public numBytes: number;
    public algorithm: BloomFilterAlgorithm.BloomFilterAlgorithm;
    public hash: BloomFilterHash.BloomFilterHash;
    public compression: BloomFilterCompression.BloomFilterCompression;
    constructor(args: IBloomFilterHeaderArgs) {
        if (args != null && args.numBytes != null) {
            this.numBytes = args.numBytes;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[numBytes] is unset!");
        }
        if (args != null && args.algorithm != null) {
            this.algorithm = args.algorithm;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[algorithm] is unset!");
        }
        if (args != null && args.hash != null) {
            this.hash = args.hash;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[hash] is unset!");
        }
        if (args != null && args.compression != null) {
            this.compression = args.compression;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[compression] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("BloomFilterHeader");
        if (this.numBytes != null) {
            output.writeFieldBegin("numBytes", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.numBytes);
            output.writeFieldEnd();
        }
        if (this.algorithm != null) {
            output.writeFieldBegin("algorithm", thrift.Thrift.Type.STRUCT, 2);
            this.algorithm.write(output);
            output.writeFieldEnd();
        }
        if (this.hash != null) {
            output.writeFieldBegin("hash", thrift.Thrift.Type.STRUCT, 3);
            this.hash.write(output);
            output.writeFieldEnd();
        }
        if (this.compression != null) {
            output.writeFieldBegin("compression", thrift.Thrift.Type.STRUCT, 4);
            this.compression.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): BloomFilterHeader {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        _args.numBytes = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: BloomFilterAlgorithm.BloomFilterAlgorithm = BloomFilterAlgorithm.BloomFilterAlgorithm.read(input);
                        _args.algorithm = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: BloomFilterHash.BloomFilterHash = BloomFilterHash.BloomFilterHash.read(input);
                        _args.hash = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: BloomFilterCompression.BloomFilterCompression = BloomFilterCompression.BloomFilterCompression.read(input);
                        _args.compression = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.numBytes !== undefined && _args.algorithm !== undefined && _args.hash !== undefined && _args.compression !== undefined) {
            return new BloomFilterHeader(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read BloomFilterHeader from input");
        }
    }
}
