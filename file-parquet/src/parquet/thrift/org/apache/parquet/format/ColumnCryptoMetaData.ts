/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as EncryptionWithFooterKey from "./EncryptionWithFooterKey";
import * as EncryptionWithColumnKey from "./EncryptionWithColumnKey";
export interface IColumnCryptoMetaDataArgs {
    ENCRYPTION_WITH_FOOTER_KEY?: EncryptionWithFooterKey.EncryptionWithFooterKey;
    ENCRYPTION_WITH_COLUMN_KEY?: EncryptionWithColumnKey.EncryptionWithColumnKey;
}
export class ColumnCryptoMetaData {
    public ENCRYPTION_WITH_FOOTER_KEY?: EncryptionWithFooterKey.EncryptionWithFooterKey;
    public ENCRYPTION_WITH_COLUMN_KEY?: EncryptionWithColumnKey.EncryptionWithColumnKey;
    constructor(args?: IColumnCryptoMetaDataArgs) {
        let _fieldsSet: number = 0;
        if (args != null) {
            if (args.ENCRYPTION_WITH_FOOTER_KEY != null) {
                _fieldsSet++;
                this.ENCRYPTION_WITH_FOOTER_KEY = args.ENCRYPTION_WITH_FOOTER_KEY;
            }
            if (args.ENCRYPTION_WITH_COLUMN_KEY != null) {
                _fieldsSet++;
                this.ENCRYPTION_WITH_COLUMN_KEY = args.ENCRYPTION_WITH_COLUMN_KEY;
            }
            if (_fieldsSet > 1) {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with more than one set value!");
            }
            else if (_fieldsSet < 1) {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with no set value!");
            }
        }
    }
    public static fromENCRYPTION_WITH_FOOTER_KEY(ENCRYPTION_WITH_FOOTER_KEY: EncryptionWithFooterKey.EncryptionWithFooterKey): ColumnCryptoMetaData {
        return new ColumnCryptoMetaData({ ENCRYPTION_WITH_FOOTER_KEY });
    }
    public static fromENCRYPTION_WITH_COLUMN_KEY(ENCRYPTION_WITH_COLUMN_KEY: EncryptionWithColumnKey.EncryptionWithColumnKey): ColumnCryptoMetaData {
        return new ColumnCryptoMetaData({ ENCRYPTION_WITH_COLUMN_KEY });
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ColumnCryptoMetaData");
        if (this.ENCRYPTION_WITH_FOOTER_KEY != null) {
            output.writeFieldBegin("ENCRYPTION_WITH_FOOTER_KEY", thrift.Thrift.Type.STRUCT, 1);
            this.ENCRYPTION_WITH_FOOTER_KEY.write(output);
            output.writeFieldEnd();
        }
        if (this.ENCRYPTION_WITH_COLUMN_KEY != null) {
            output.writeFieldBegin("ENCRYPTION_WITH_COLUMN_KEY", thrift.Thrift.Type.STRUCT, 2);
            this.ENCRYPTION_WITH_COLUMN_KEY.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ColumnCryptoMetaData {
        let _fieldsSet: number = 0;
        let _returnValue: ColumnCryptoMetaData | null = null;
        input.readStructBegin();
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_1: EncryptionWithFooterKey.EncryptionWithFooterKey = EncryptionWithFooterKey.EncryptionWithFooterKey.read(input);
                        _returnValue = ColumnCryptoMetaData.fromENCRYPTION_WITH_FOOTER_KEY(value_1);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_2: EncryptionWithColumnKey.EncryptionWithColumnKey = EncryptionWithColumnKey.EncryptionWithColumnKey.read(input);
                        _returnValue = ColumnCryptoMetaData.fromENCRYPTION_WITH_COLUMN_KEY(value_2);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_fieldsSet > 1) {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with more than one set value!");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with no set value!");
        }
        if (_returnValue !== null) {
            return _returnValue;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read data for TUnion");
        }
    }
}
